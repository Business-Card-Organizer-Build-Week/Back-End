server.port=${PORT:2019}
server.servlet.context-path=/api

# Which db to run
#local.run.db=H2
local.run.db=POSTGRESQL

# Environment Variables Needed for PostgreSQL database
# MYDBHOST
# MYDBNAME
# MYDBUSER
# MYDBPASSWORD

# Environment Variables Needed for OAuth2 Authentication Server
# OAUTHCLIENTID
# OAUTHCLIENTSECRET
# Find heroku info
# heroku config -a jrmmba-oauthmin
# postgres://mjzabmddwmuffl:6beb771d9b964cb41683cd5759e9410b12b14f51557f8ccdade3356db3b9bd77@ec2-174-129-229-106.compute-1.amazonaws.com:5432/d26523dd6mh09j
# posgress://username      :password                                                        @url                                      :5432/dbname

# Begin h2 configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always

# Good for production!
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=never

# Should we use createBlob from java.sql.connection. PostgreSQL requires it to be true.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false

# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false

# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true

# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true
